void BW() {
    // Calculate the Average of pixels
    int Avg = SIZE/2 ;
    for (int i = 0 ; i < SIZE ; i++) {
      for (int j = 0 ; j< SIZE ; j++) {

      // convert to Black & White
      if(image[i][j] >= Avg)
        image[i][j] = 255 ;
      else
        image[i][j] = 0 ;
        }
    }
}
void Invert()
{
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            image[i][j] = 255 - image[i][j];  // Invert each pixel
        }
    }
}
void Flip() {

    int tmp [SIZE][SIZE];

    // Store the value of pixel in temp
    for (int i = 0 ; i < SIZE ; i++) {
      for (int j = 0 ; j< SIZE ; j++) {
        tmp[i][j]=image[i][j] ;
        }
    }
    // Flip the pixels
    for (int i = 0 ; i < SIZE ; i++) {
      for (int j = 0 ; j< SIZE ; j++) {
        image[i][j]=tmp[SIZE-i-1][j] ;
        }
    }
}

void Rotate()
{
    string userInput;
    cout << "Rotate (90), (180), (270) or (360) degrees?\n";
    cin >> userInput;
    if (userInput == "360" || userInput == "270" || userInput == "180" || userInput == "90") {
        int angle = stoi(userInput);
        for (int i = 0; i < angle / 90; i++) {
            rotate90();
        }
    } else {
        cout << "Unrecognized angle! Please try again\n";
        return Rotate();
    }
}


void rotate90()
{
    unsigned char temp[SIZE][SIZE];
    // Store img into a temporary array
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            temp[i][j] = image[i][j];
        }
    }
    // Store into img rotated 90 Deg.
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            image[j][SIZE - 1 - i] = temp[i][j];
        }
    }
}
void Detected_edged() {

    int tmp[SIZE][SIZE] ;

    // Convert the original image into Black & White image
    for (int i=0 ; i<SIZE ; i++){
        for (int j=0 ; j<SIZE ; j++){

            if(image[i][j] > 127)
                image[i][j] = 255 ; // White pixel
            else
                image[i][j] = 0 ; // Black pixel
        }
    }
    // Store the image in the temp
    for (int i=0 ; i<SIZE ; i++){
        for (int j=0 ; j<SIZE ; j++){

            tmp[i][j] = image[i][j] ;
        }
    }
    // Whitening the Black pixels surrounded by Black pixels from the 4 destinations
    for (int i=0 ; i<SIZE ; i++){
        for (int j=0 ; j<SIZE ; j++){

            if(image[i][j] == 0 &&
               image[i][j] == image[i][j-1] && image[i][j] == image[i][j+1] &&
               image[i][j] == image[i-1][j] && image[i][j] == image[i+1][j])

                tmp[i][j] = 255 ;
        }
    }
    // Store the Detected Edged image in the original image array
    for (int i=0 ; i<SIZE ; i++){
        for (int j=0 ; j<SIZE ; j++){

            image[i][j] = tmp[i][j] ;
        }
    }
}
void Enlagefilter() {
    int n;
    cout<<"Which quarter to enlarge 1, 2, 3 or 4? ";
    cin>>n;
    if (n==1){
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j< SIZE; j++)
            {
                image2[i][j]=image[i/2][j/2];
            }
        }
    }
    if (n==2){
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j< SIZE; j++)
            {
                image2[i][j]=image[(i)/2][(j+256)/2];
            }
        }
    }
    if (n==3){
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j< SIZE; j++)
            {
                image2[i][j]=image[(i+256)/2][(j)/2];
            }
        }
    }
    if (n==4){
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j< SIZE; j++)
            {
                image2[i][j]=image[(i+256)/2][(j+256)/2];
            }
        }
    }
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j< SIZE; j++) {
            image[i][j]=image2[i][j];
        }
    }
}
void mirror() {

    // Flip the pixels
    for (int i = 0 ; i < SIZE ; i++) {
      for (int j = 0 ; j < SIZE ; j++) {
        image[i][j] = image[SIZE-i-1][j] ;
        }
    }
}
void shufflefilter() {
    cout << "New order of quarters? ";
    bool z = true;
    int a, b, c, d;
    cin >> a >> b >> c >> d;
    while (z) {
        if ((a > 4 || a < 1) || (b > 4 || b < 1) || (c > 4 || c < 1) || (d > 4 || d < 1)) {
            cout << "Wrong input , please inter new order of quarters: ";
            cin >> a >> b >> c >> d;
        } else {
            z = false;
        }
    }
    for (int i = 0; i < 128; i++) {
        for (int j = 0; j < 128; j++) {
            if (a == 1) {
                image2[i][j] = image[i][j];
            }
            if (a == 2) {
                image2[i][j] = image[i][j + 127];
            }
            if (a == 3) {
                image2[i][j] = image[i + 127][j];
            }
            if (a == 4) {
                image2[i][j] = image[i + 127][j + 127];
            }
        }
        for (int i = 0; i < 128; i++) {
            for (int j = 127; j < 256; j++) {
                if (b == 1) {
                    image2[i][j] = image[i][j - 127];
                }
                if (b == 2) {
                    image2[i][j] = image[i][j];
                }
                if (b == 3) {
                    image2[i][j] = image[i + 127][j - 127];
                }
                if (b == 4) {
                    image2[i][j] = image[i + 127][j];
                }
            }
        }

        for (int i = 127; i < 256; i++) {
            for (int j = 0; j < 128; j++) {
                if (c == 1) {
                    image2[i][j] = image[i - 127][j];
                }
                if (c == 2) {
                    image2[i][j] = image[i - 127][j + 127];
                }
                if (c == 3) {
                    image2[i][j] = image[i][j];
                }
                if (c == 4) {
                    image2[i][j] = image[i][j + 127];
                }
            }
        }
        for (int i = 127; i < 256; i++) {
            for (int j = 127; j < 256; j++) {
                if (d == 1) {
                    image2[i][j] = image[i - 127][j - 127];
                }
                if (d == 2) {
                    image2[i][j] = image[i - 127][j];
                }
                if (d == 3) {
                    image2[i][j] = image[i][j - 127];
                }
                if (d == 4) {
                    image2[i][j] = image[i][j];
                }
            }
        }
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                image[i][j] = image2[i][j];
            }
        }
    }
}
void crop () {
    // The image required dimentions
    int x , y , l , w ;
    cin >> x >> y >> l >> w ;

    int cropped[SIZE][SIZE] ;
    for (int i = 0 ; i < SIZE ; i++) {
      for (int j = 0 ; j< SIZE ; j++) {
        cropped[i][j] = SIZE-1 ; //White image
        }
    }
    for (int i = x ; i < (x+l) ; i++) {
      for (int j = y ; j < (y+w) ; j++) {
        //move the required pixels to (cropped) 
        cropped[i][j] = image[i][j] ;
        }
    }
    for (int i = 0 ; i < SIZE ; i++) {
      for (int j = 0 ; j< SIZE ; j++) {
        //store the cropped version in image
        image[i][j] = cropped[i][j] ;
        }
    }
}
void crop () {
void Skew_Right(){ 
cout<<"Please enter degree to skew right: "; 
double degree; 
cin>>degree; 
degree = 90 - degree; 
degree = ( degree*22)/(180*7); // to convert the degree into radian
double x = tan(degree);
double shrinkval= (256 / (1+(1/x))); 
double move = SIZE - shrinkval ;  // starting point of the picture
double step = move / SIZE ;  // change of movement along the picture
shrinkval = shrinkval / SIZE ; 
shrinkval = 1/shrinkval;
for (int i=0 ; i<SIZE ; i++){
   for (int j = 0; j< SIZE; j++) 
        {
          // to make temp image all white
              tempimage[i][j]=255;
        }
}
for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j< SIZE; j++) {
        if(j*shrinkval<=255)
        {
          // to shrink the picture
        tempimage[i][j]=image[i][int(j*shrinkval)];
        }
     }
    }
    for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j< SIZE; j++) 
      {// copy rwmp image into original image
        image[i][j]=tempimage[i][j];
     }
}
for (int i=0 ; i<SIZE ; i++){
   for (int j = 0; j< SIZE; j++) 
        { //// to make temp image all white
              tempimage[i][j]=255;
        }
}
for (int i=0 ; i<SIZE ; i++){
   for (int j = move; j< SIZE; j++) 
        {
              tempimage[i][j]=image[i][j-int(move)];
        }
        move-=step;
}
for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j< SIZE; j++) {
        image[i][j]=tempimage[i][j];
     }
}
}


void Skew_Up(){ 
/*
all same as in skew right except that we loop in opposite direction to make it horizontal not vertical
*/
cout<<"Please enter degree to skew Up: "; 
double degree; 
cin>>degree; 
degree = 90 - degree; 
degree = ( degree*22)/(180*7); 
double x = tan(degree);
double shrinkval= (256 / (1+(1/x))); 
double move = SIZE - shrinkval ;  
double step = move / SIZE ; 
shrinkval = shrinkval / SIZE ; 
shrinkval = 1/shrinkval;
for (int i=0 ; i<SIZE ; i++){
   for (int j = 0; j< SIZE; j++) 
        {
              tempimage[i][j]=255;
        }
}
for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j< SIZE; j++) {
        if(i*shrinkval<=255){
        tempimage[i][j]=image[int(i*shrinkval)][j];
        }
     }
    }
    for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j< SIZE; j++) {
        image[i][j]=tempimage[i][j];
     }
}
for (int i=0 ; i<SIZE ; i++){
   for (int j = 0; j< SIZE; j++) 
        {
              tempimage[i][j]=255;
        }
}
for (int j=0 ; j<SIZE ; j++){
   for (int i = move; i< SIZE; i++) 
        {
              tempimage[i][j]=image[i-int(move)][j];
        }
        move-=step;
}
for (int i = 0; i < SIZE; i++) {
      for (int j = 0; j< SIZE; j++) {
        image[i][j]=tempimage[i][j];
     }
}
}
